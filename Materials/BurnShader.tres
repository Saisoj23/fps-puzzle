[gd_resource type="VisualShader" load_steps=11 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=2]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarClamp" id=3]

[sub_resource type="VisualShaderNodeScalarOp" id=4]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarClamp" id=5]

[sub_resource type="VisualShaderNodeTextureUniform" id=6]
uniform_name = "Texture"
texture_type = 1

[sub_resource type="VisualShaderNodeColorConstant" id=7]

[sub_resource type="VisualShaderNodeScalarOp" id=8]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=9]
uniform_name = "Scalar"

[sub_resource type="VisualShaderNodeColorOp" id=10]
operator = 2

[resource]
code = "shader_type spatial;
render_mode depth_draw_always, cull_disabled, specular_schlick_ggx;

uniform sampler2D Texture : hint_albedo;
uniform float Scalar;



void vertex() {
// Output:0

}

void fragment() {
// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(Texture, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// Color:4
	vec3 n_out4p0 = vec3(1.000000, 1.000000, 1.000000);
	float n_out4p1 = 1.000000;

// ScalarUniform:7
	float n_out7p0 = Scalar;

// ScalarOp:14
	float n_in14p1 = 2.00000;
	float n_out14p0 = n_out7p0 * n_in14p1;

// ScalarOp:11
	float n_in11p1 = 1.00000;
	float n_out11p0 = n_out14p0 - n_in11p1;

// ScalarClamp:13
	float n_in13p1 = 0.00000;
	float n_in13p2 = 1.00000;
	float n_out13p0 = clamp(n_out11p0, n_in13p1, n_in13p2);

// ScalarOp:6
	float n_out6p0 = dot(n_out4p0, vec3(0.333333, 0.333333, 0.333333)) * n_out13p0;

// ColorOp:8
	vec3 n_out8p0 = min(n_out2p0, vec3(n_out6p0));

// ScalarClamp:15
	float n_in15p1 = 0.00000;
	float n_in15p2 = 1.00000;
	float n_out15p0 = clamp(n_out14p0, n_in15p1, n_in15p2);

// ScalarOp:10
	float n_out10p0 = n_out2p1 * n_out15p0;

// Output:0
	ALBEDO = n_out8p0;
	ALPHA = n_out10p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -510.188, 219.729 )
modes/cull = 2
modes/depth_draw = 1
nodes/fragment/0/position = Vector2( 440, 160 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( -100, 120 )
nodes/fragment/4/node = SubResource( 7 )
nodes/fragment/4/position = Vector2( -280, 280 )
nodes/fragment/6/node = SubResource( 8 )
nodes/fragment/6/position = Vector2( -20, 320 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( -800, 700 )
nodes/fragment/8/node = SubResource( 10 )
nodes/fragment/8/position = Vector2( 160, 260 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 200, 380 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -400, 460 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( -220, 400 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( -600, 640 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( -160, 540 )
nodes/fragment/connections = PoolIntArray( 4, 0, 6, 0, 2, 0, 8, 0, 6, 0, 8, 1, 8, 0, 0, 0, 2, 1, 10, 0, 10, 0, 0, 1, 13, 0, 6, 1, 7, 0, 14, 0, 14, 0, 15, 0, 15, 0, 10, 1, 14, 0, 11, 0, 11, 0, 13, 0 )
