[gd_resource type="VisualShader" load_steps=6 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
uniform_name = "Texture"
texture_type = 1

[sub_resource type="VisualShaderNodeColorOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=3]
uniform_name = "Color"

[sub_resource type="VisualShaderNodeScalarUniform" id=4]
uniform_name = "Intensity"

[sub_resource type="VisualShaderNodeVectorOp" id=5]
operator = 2

[resource]
code = "shader_type spatial;
render_mode depth_draw_always, cull_disabled, specular_schlick_ggx;

uniform sampler2D Texture : hint_albedo;
uniform vec4 Color : hint_color;
uniform float Intensity;



void vertex() {
// Output:0

}

void fragment() {
// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(Texture, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// ColorUniform:4
	vec3 n_out4p0 = Color.rgb;
	float n_out4p1 = Color.a;

// ColorOp:3
	vec3 n_out3p0 = min(n_out2p0, n_out4p0);

// ScalarUniform:5
	float n_out5p0 = Intensity;

// VectorOp:6
	vec3 n_out6p0 = n_out3p0 * vec3(n_out5p0);

// Output:0
	ALBEDO = n_out3p0;
	ALPHA = n_out2p1;
	EMISSION = n_out6p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -510.188, 219.729 )
modes/cull = 2
modes/depth_draw = 1
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -100, 140 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 120, 240 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -80, 320 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -40, 440 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( 180, 360 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 4, 0, 3, 1, 3, 0, 6, 0, 6, 0, 0, 5, 5, 0, 6, 1, 3, 0, 0, 0, 2, 1, 0, 1 )
